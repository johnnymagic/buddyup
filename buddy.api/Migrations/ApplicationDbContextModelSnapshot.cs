// <auto-generated />
using System;
using System.Collections.Generic;
using BuddyUp.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace buddy.api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Activity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<int?>("MaxParticipants")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RecurringSchedule")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("SportId")
                        .HasColumnType("uuid");

                    b.HasKey("ActivityId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SportId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Conversation", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastMessageAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("uuid");

                    b.HasKey("ConversationId");

                    b.HasIndex("MatchId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Point>("Coordinates")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("LocationId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Match", b =>
                {
                    b.Property<Guid>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RequesterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SportId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("MatchId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SportId");

                    b.HasIndex("RequesterId", "RecipientId", "SportId")
                        .IsUnique();

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MessageId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Sport", b =>
                {
                    b.Property<Guid>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("SportId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Sports");

                    b.HasData(
                        new
                        {
                            SportId = new Guid("8056afb6-6f5a-4799-a69c-f8e5c2de53ad"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A racket sport played on a rectangular court",
                            IconUrl = "/images/sports/tennis.svg",
                            IsActive = true,
                            Name = "Tennis"
                        },
                        new
                        {
                            SportId = new Guid("3a98a529-8ea9-46e1-8acf-1c4558fd8bf4"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A team sport played with a ball and hoop",
                            IconUrl = "/images/sports/basketball.svg",
                            IsActive = true,
                            Name = "Basketball"
                        },
                        new
                        {
                            SportId = new Guid("cb5b097c-ab7b-4b28-8c7f-4fef91d8a9e7"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "An individual sport involving running distances",
                            IconUrl = "/images/sports/running.svg",
                            IsActive = true,
                            Name = "Running"
                        },
                        new
                        {
                            SportId = new Guid("9544f52b-8a96-457a-a481-c7b4f0dd78fd"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A sport involving riding bicycles",
                            IconUrl = "/images/sports/cycling.svg",
                            IsActive = true,
                            Name = "Cycling"
                        },
                        new
                        {
                            SportId = new Guid("a0e58388-ccba-4cdf-9af2-25ee470adb68"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A water-based sport",
                            IconUrl = "/images/sports/swimming.svg",
                            IsActive = true,
                            Name = "Swimming"
                        },
                        new
                        {
                            SportId = new Guid("a20ed55e-13d3-4b92-8abc-c3e7c8ae9550"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A physical, mental and spiritual practice",
                            IconUrl = "/images/sports/yoga.svg",
                            IsActive = true,
                            Name = "Yoga"
                        },
                        new
                        {
                            SportId = new Guid("caeb79ef-c17e-443e-914b-b27fb9a8c1cc"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A club-and-ball sport",
                            IconUrl = "/images/sports/golf.svg",
                            IsActive = true,
                            Name = "Golf"
                        },
                        new
                        {
                            SportId = new Guid("c9ea073c-f6fb-4a29-ad69-b5c2060ead7a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Walking in natural environments",
                            IconUrl = "/images/sports/hiking.svg",
                            IsActive = true,
                            Name = "Hiking"
                        },
                        new
                        {
                            SportId = new Guid("b03df04f-405a-46e4-a424-a0351f67ff98"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A team sport played with a ball",
                            IconUrl = "/images/sports/soccer.svg",
                            IsActive = true,
                            Name = "Soccer"
                        },
                        new
                        {
                            SportId = new Guid("8731bdcf-cda2-48d5-b92f-2cf9b4797c61"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A team sport played with a ball over a net",
                            IconUrl = "/images/sports/volleyball.svg",
                            IsActive = true,
                            Name = "Volleyball"
                        });
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.UserProfile", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxTravelDistance")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("PreferredDays")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text[]");

                    b.Property<Point>("PreferredLocation")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.PrimitiveCollection<List<string>>("PreferredTimes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text[]");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("PublicProfile")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("VerificationCompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.UserReport", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReportedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportingUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReviewedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ReportId");

                    b.HasIndex("ReportedUserId");

                    b.HasIndex("ReportingUserId");

                    b.HasIndex("ReviewedByUserId");

                    b.ToTable("UserReports");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.UserSport", b =>
                {
                    b.Property<Guid>("UserSportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkillLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("SportId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("YearsExperience")
                        .HasColumnType("integer");

                    b.HasKey("UserSportId");

                    b.HasIndex("SportId");

                    b.HasIndex("UserId", "SportId")
                        .IsUnique();

                    b.ToTable("UserSports");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Verification", b =>
                {
                    b.Property<Guid>("VerificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InitiatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProviderReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VerificationData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VerificationProvider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("VerificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("VerificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Verifications");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Activity", b =>
                {
                    b.HasOne("BuddyUp.API.Models.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("BuddyUp.API.Models.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("BuddyUp.API.Models.Domain.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Location");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Conversation", b =>
                {
                    b.HasOne("BuddyUp.API.Models.Domain.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Location", b =>
                {
                    b.HasOne("BuddyUp.API.Models.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Match", b =>
                {
                    b.HasOne("BuddyUp.API.Models.Domain.User", "Recipient")
                        .WithMany("ReceivedMatchRequests")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BuddyUp.API.Models.Domain.User", "Requester")
                        .WithMany("SentMatchRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BuddyUp.API.Models.Domain.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId");

                    b.Navigation("Recipient");

                    b.Navigation("Requester");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Message", b =>
                {
                    b.HasOne("BuddyUp.API.Models.Domain.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuddyUp.API.Models.Domain.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Sport", b =>
                {
                    b.HasOne("BuddyUp.API.Models.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.UserProfile", b =>
                {
                    b.HasOne("BuddyUp.API.Models.Domain.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("BuddyUp.API.Models.Domain.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.UserReport", b =>
                {
                    b.HasOne("BuddyUp.API.Models.Domain.User", "ReportedUser")
                        .WithMany("ReportsReceived")
                        .HasForeignKey("ReportedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BuddyUp.API.Models.Domain.User", "ReportingUser")
                        .WithMany("ReportsSubmitted")
                        .HasForeignKey("ReportingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BuddyUp.API.Models.Domain.User", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId");

                    b.Navigation("ReportedUser");

                    b.Navigation("ReportingUser");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.UserSport", b =>
                {
                    b.HasOne("BuddyUp.API.Models.Domain.Sport", "Sport")
                        .WithMany("UserSports")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuddyUp.API.Models.Domain.User", "User")
                        .WithMany("Sports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Verification", b =>
                {
                    b.HasOne("BuddyUp.API.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.Sport", b =>
                {
                    b.Navigation("UserSports");
                });

            modelBuilder.Entity("BuddyUp.API.Models.Domain.User", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("ReceivedMatchRequests");

                    b.Navigation("ReportsReceived");

                    b.Navigation("ReportsSubmitted");

                    b.Navigation("SentMatchRequests");

                    b.Navigation("SentMessages");

                    b.Navigation("Sports");
                });
#pragma warning restore 612, 618
        }
    }
}
